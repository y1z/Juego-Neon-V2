#include <iostream>
#include <string>
#include <algorithm>
#include <random>
#include <fstream>
#include <vector>

class Piso
{
public:
	int filas;
	int columnas;
	void crear_Piso(int x, int y)
	{
		columnas = y;
		filas = x;

	}

};

std::vector<std::vector<char>> Nivel_1 // uso estos vectores para dibujar los Nivels del juego este es el Primer piso 
{

	{ '*', '*', '*', '!', '*', 'K' },
	{ 'F', '#', ' ', 'b', ' ', ' ' },
	{ '*', '*', 'k', ' ', '*', '!' },
	{ 'k', ' ', ' ', ' ', ' ', ' ' },
	{ 'E', ' ', ' ', ' ', '#', '!' },
	{ ' ', ' ', '#', ' ', ' ', '*' },
	{ ' ', '*', '!', '*', 'e', '*' },
	{ ' ', '*', '*', '*', 'e', ' ' },
	{ ' ', ' ', 'S', ' ', ' ', ' ' },

};


std::vector<std::vector<char>> Nivel_2// esto es el segundo nivel
{
	{ '*','E','*',' ',' ',' ',' ','*','*' },
	{ '*','#','*',' ',' ','*','!','e',' ' },
	{ 'S','k',' ',' ',' ','*','*',' ',' ' },
	{ '*',' ',' ','*','!',' ','*','k','*' },
	{ '!','#',' ','*','!',' ','!','*','*' },
	{ '!','e',' ',' ','*',' ',' ',' ','*' },
	{ '*',' ','#','!','>',' ',' ','!','*' },
	{ '!','E',' ','*','*','*','*','b','!' },
	{ '*',' ',' ','#',' ',' ','!','!','f' }

};

std::vector<std::vector<char>> Nivel_3// esto es el trecer nivel
{

	{ 'B',' ',' ',' ',' ',' ',' ','!' },
	{ ' ',' ',' ','*','!','e',' ',' ' },
	{ ' ',' ',' ','*','*','!','e',' ' },
	{ ' ',' ',' ',' ',' ','*',' ',' ' },
	{ '!','!','*',' ',' ',' ','*',' ' },
	{ '!','!','*',' ',' ',' ',' ','S' }

};

std::vector<std::vector<char>> Test// para probar el fog of war del juego( y el juego en general ) 
{
	{ '#','#','#','#','#' },
	{ '#',' ',' ',' ','#' },
	{ '#','e',' ',' ','#' },
	{ '#','#','#','#','#' },

};

std::vector<std::vector<char>> Personaje_Jugador
{

	{ ' ',' ',' ',' ',' ',' ', '\t' },
	{ ' ',' ',' ','@',' ',' ', '\t' },
	{ ' ',' ','/','|','\\',' ', '\t' },
	{ ' ',' ',' ','|',' ',' ', '\t' },
	{ ' ',' ','/',' ','\\',' ', '\t' },
	{ ' ',' ','|',' ','|',' ', '\t' },
	{ ' ',' ',' ',' ',' ',' ', '\t' },
    { ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\t' },
	{ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\t' },
	{ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\t' },
	{ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\t' },
	{ ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','\t' },

};

std::vector<std::vector<char>> personaje_2
{

	{ '\t',' ','?','?','?',' ', ' ' },
	{ '\t',' ','?','°','?',' ', ' ' },
	{ '\t',' ',' ','|',' ',' ', ' ' },
	{ '\t',' ','/','|','\\',' ', ' ' },
	{ '\t',' ','\\','0','/',' ', ' ' },
	{ '\t',' ',' ','-',' ',' ', ' ' },
	{ '\t',' ',' ',' ',' ',' ', ' ' },
	{ '\t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
	{ '\t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
	{ '\t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
	{ '\t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
	{ '\t',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' },
	
};

bool Juego_Activo = true;


int max_x = 7;
int max_y = 8;

std::vector<std::vector<bool> > visitados;// usar esto para revisar los cuartos que visite

std::vector<std::vector<bool> > Enemigos_ubicacion; // estos vectores sirven para saber si ya visite a un enemigo 

void es(int x)
{
	for (int i = 0; i<x; ++i)
	{
		std::cout << std::endl;
	}
}

void stop()
{
	std::cin.ignore();
	std::cin.get();
}

class Jugador
{
public:
	std::string M_Nombre;// lo ingresa el jugador

	double M_Vida = 10;// puede cambiar

	double M_Ataque = 2;// puede cambiar 

	int M_X;   // horizontales
	int M_Y;	 // verticales

	Jugador();
	~Jugador();

private:

	enum Hechisos// posible que no los use ( o le cambio el nombre y use un calendario chino para determinar que Hechisos puedas usar )
	{
		Fire=2,
		Firaga=4
	};


};

Jugador::Jugador()
{
}

Jugador::~Jugador()
{
}




void dibujar_combate(std::vector<std::vector<char>> Figura_1, std::vector<std::vector<char>> Figura_2) // esta funcion se encargara de dibujar los personajes que van estar en combate 
{
	// las dos figuras deberia ser del mismo tamaño

	for (int j = 0; j < Figura_1.size(); j++)
	{
		std::cout << std::endl;
		for (int i = 0; i < Figura_1[j].size(); i++)
		{
			std::cout << Figura_1[j][i];
		}
		for (int l = 0; l < Figura_2[j].size(); l++)
		{
			std::cout << Figura_2[j][l];
		}
	}
	std::cout << std::endl;
	
}




void dibujar_mapa(int x, int y, std::vector<std::vector<char>> mapa)// estos dos valores son la cordenadas del jugador 
{
	int eje_x = x;
	int eje_y = y;

	char Cosas_mapa;

	for (int j = 0; j < mapa.size(); j++)
	{
		std::cout << '\n';
		for (int i = 0; i < mapa[j].size(); i++)
		{
			if (eje_y == j && eje_x == i)// imprime la ubicacion del personajes 
			{
				std::cout << '@';
				visitados[j][i] = true;
			}
			else if(mapa[eje_y][eje_x] == 'e' && Enemigos_ubicacion[eje_y][eje_x] == true)
			{
				Enemigos_ubicacion[eje_y][eje_x] = false;
				dibujar_combate(Personaje_Jugador, personaje_2);
			}
			else
			{
				if (visitados[j][i] == true) 
				{
					std::cout << mapa[j][i];
				}
				else if (j == eje_y && i == eje_x + 1 && visitados[j][i] == false) // este 
				{
				std::cout << mapa[j][i];
				
					if (eje_x <= max_x) // checa si estamos dentro de los bordes del mapa y para no sailrnos del rango de los vectores 
					{
						visitados[j][i] = true;
					}
			
				}
				else if (j == eje_y  && i == eje_x - 1 && visitados[j][i] == false) // oeste
				{
					std::cout << mapa[j][i];
					if (eje_x >= 1) 
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y + 1 && i == eje_x && visitados[j][i] == false) // sur
				{
					std::cout << mapa[j][i];
					if (eje_y <= mapa.size())
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y - 1 && i == eje_x && visitados[j][i] == false) // norte
				{
					std::cout << mapa[j][i];
					if (eje_y > 0) 
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y + 1 && i == eje_x + 1 && visitados[j][i] == false) // sur este
				{
					std::cout << mapa[j][i];
					if (eje_y <= mapa.size() && eje_x <= max_x) 
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y + 1 && i == eje_x - 1 && visitados[j][i] == false) // sur oeste
				{
					std::cout << mapa[j][i];
					
					if (eje_y <= mapa.size() && eje_x >= 1) 
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y - 1 && i == eje_x + 1 && visitados[j][i] == false)  //nor este
				{
					std::cout << mapa[j][i];
					if(eje_y > 0 && eje_x <= max_x)
					{
						visitados[j][i] = true;
					}
				}
				else if (j == eje_y - 1 && i == eje_x - 1 && visitados[j][i] == false) // nor oeste
				{
					std::cout << mapa[j][i];
					if(eje_y > 0 && eje_x >= 1)
					{
						visitados[j][i] = true;
					}
				}
				else
				{
					std::cout << ' ';
				}
			}
		}
	}
}


int main()
{

	//stop();
	std::vector<std::vector<char>> Copia_nivel;

	Jugador Mi_Jugador;
	Piso piso;

	std::string Nombre_jugador;
	std::string comando;

	

	int nuevo_max_x = 0;// para determinar el borde del eje x en el juego
	int nuevo_max_y = 0;// para determinar el borde del eje y en el juego

	std::cout << " ingresa tu nombre  " << std::endl;
	
	std::cin >> Nombre_jugador;
	
	std::cout << " dime que piso quieres tienes estas opciones ([{ 1,2,3}]) "; // esta parte del codigo es SOLO para probar el juego y tambien el std::cin>>comando que esta debajo
	
	std::cin >> comando;
	
	if(comando == "1")
	{
		Copia_nivel = Nivel_1;
	}
	else if (comando == "2")
	{
		Copia_nivel = Nivel_2;
	}
	else if (comando == "3")
	{
		Copia_nivel = Nivel_3;
	}
	else if (comando == "p")
	{
		Copia_nivel = Test;
	}
	else 
	{
		Copia_nivel = Nivel_1;
	}
	for (int i = 0; i < Copia_nivel.size(); ++i) // este for es para crear los bordes de los mapas para no sailrse de ellos 
	{

		if (nuevo_max_x < Copia_nivel[i].size())
		{
			nuevo_max_x = Copia_nivel[i].size();
		}
		++nuevo_max_y;

	}
	max_x = nuevo_max_x;
	max_y = nuevo_max_y;

	std::cout << std::endl << "te puedes mover con las teclar 'n' , 's', 'e','o' y 'w' , las teclas 'w' y 'o' hacen lo mismo " << std::endl;


	Mi_Jugador.M_Nombre = Nombre_jugador;

	Mi_Jugador.M_X = 2;
	Mi_Jugador.M_Y = 2;

	visitados.reserve(6);

	for (int j = 0; j < Copia_nivel.size(); ++j)// crear un vector vacio 
	{
		visitados.push_back({});

		for (int i = 0; i < max_x; ++i)// Inicializar las posiciones como no vististadas o false 
		{
			visitados[j].push_back(false);
		}
	}
	for (int j = 0; j < Copia_nivel.size(); ++j)
	{
		Enemigos_ubicacion.push_back({});
		
		for (int i = 0; i < max_x; ++i)
		{
			if (Copia_nivel[j][i] == 'e') 
			{
				Enemigos_ubicacion[j].push_back(true);
			}
			else
			{
				Enemigos_ubicacion[j].push_back(false);
			}
		}
	}
	for (int j = 0; j < Copia_nivel.size(); ++j)
	{
		for (int i = 0; i < Copia_nivel[j].size(); ++i)
		{
			if(Copia_nivel[j][i]=='S')
			{
				Mi_Jugador.M_Y = j;
				Mi_Jugador.M_X = i;
				break;
			}
		}
	}

	dibujar_mapa(Mi_Jugador.M_X, Mi_Jugador.M_Y, Copia_nivel);

	while (Juego_Activo == true)
	{
		std::cout << " dime lo que quieres hacer \n";
		std::cin >> comando;

		if (comando == "N" || comando == "n" || comando == "norte" || comando == "Norte")// encargado del movimiento y que el jugador no se salga de las bareras del juego 
		{
			Mi_Jugador.M_Y -= 1;

			if (Mi_Jugador.M_Y < 0)
			{
				Mi_Jugador.M_Y += 1;

			}
			else if (Copia_nivel[Mi_Jugador.M_Y][Mi_Jugador.M_X] == '*')// esto es para que el juguador no pueda atravesar paredes
			{
				Mi_Jugador.M_Y += 1;
			}

		}
		else if (comando == "S" || comando == "s" || comando == "succ")// encargado del movimiento y que el jugador no se salga de las bareras del juego  
		{
			Mi_Jugador.M_Y += 1;

			if (Mi_Jugador.M_Y == max_y)
			{
				Mi_Jugador.M_Y -= 1;
			}
			else if (Copia_nivel[Mi_Jugador.M_Y][Mi_Jugador.M_X] == '*')// esto es para que el juguador no pueda atravesar paredes
			{
				Mi_Jugador.M_Y -= 1;
			}
		}
		else if (comando == "E" || comando == "e" || comando == "pene")// encargado del movimiento y que el jugador no se salga de las bareras del juego  
		{
			Mi_Jugador.M_X += 1;

			if (Mi_Jugador.M_X == max_x)
			{
				Mi_Jugador.M_X -= 1;
			}
			else if (Copia_nivel[Mi_Jugador.M_Y][Mi_Jugador.M_X] == '*')// esto es para que el juguador no pueda atravesar paredes
			{
				Mi_Jugador.M_X -= 1;
			}
		}
		else if (comando == "O" || comando == "o" || comando == "olaf" || comando == "w" || comando == "W" || comando == "wambo")// encargado del movimiento y que el jugador no se salga de las bareras del juego 
		{
			Mi_Jugador.M_X -= 1;

			if (Mi_Jugador.M_X < 0)
			{
				Mi_Jugador.M_X += 1;
			}
			else if (Copia_nivel[Mi_Jugador.M_Y][Mi_Jugador.M_X] == '*')// esto es para que el juguador no pueda atravesar paredes
			{
				Mi_Jugador.M_X += 1;
			}
		}
		else if (comando == "Nombre" || comando == "nombre" || comando == "estadisticas" || comando == "todo")
		{
			es(2);
			std::cout << "Nombre : " << Mi_Jugador.M_Nombre;
			es(2);
			std::cout << "Ataque : " << Mi_Jugador.M_Ataque;
			es(2);
			std::cout << "Vida : " << Mi_Jugador.M_Vida;
			es(2);
		}
		else if (comando == "N3P3" || comando == "n3p3" || comando == "Nani" || comando == "fin")// comandos para sailr del juego ( posilblemente para guardar la partida tambien )
		{
			Juego_Activo = false;
		}
		else if (comando == "ayuda" || comando == "Ayuda") // original mente esto era un troll face pero  cuando insertaba el troll face solo saila ? en vez de los caracteres que conformaban la cara
		{
			es(2);
			std::cout << "puedes moverte con las teclas 'n','s','e','o''w' intenta explorar la que esta a tu alrededor y deja de valer verga ";
			es(3);
			std::cout << "° <|°_°|> °" << std::endl;
			std::cout << "_°_/ | \_°_" << std::endl;
			std::cout << "  _°0|0°_  " << std::endl;
			std::cout << " _ 0 ° 0 _ " << std::endl;
			std::cout << "_   °0°  _ " << std::endl;
			std::cout << " |°|_0_|°| " << std::endl;
			std::cout << "°°°°° te estoy viendo °°°°°°°°°°°°°°";
			es(2);
		}
		else if (comando == "delta")
		{
			piso.crear_Piso(5, 6);
			max_y = piso.columnas;
			max_x = piso.filas;

		}
		else// esto deberia indicar que ingresaste un comando que no reconose el juego 
		{
			es(3);
			printf(" khe brega es lo khe dices men no entendo ");
			es(3);
		}
		dibujar_mapa(Mi_Jugador.M_X, Mi_Jugador.M_Y, Copia_nivel);
		std::cout << std::endl;
		std::cout << "posicion en [x] " << Mi_Jugador.M_X << " posicion en [y] " << Mi_Jugador.M_Y;

	}

	return 0;
}


/* Este juego deberia tener los siguentes componentes

1) guardar la partida utilizando archivos

2) multiples pisos( niveles )planiados 3  [X]

3) objetos para el personaje

4) inventario

5)  formas de enseñar las estadisticas del jugador [X] 

6) sistema de combate basado en tomar turnos 

*/
